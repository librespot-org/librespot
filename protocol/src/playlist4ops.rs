// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `playlist4ops.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq, Clone, Default)]
pub struct Add {
    // message fields
    fromIndex: ::std::option::Option<i32>,
    items: ::protobuf::RepeatedField<super::playlist4content::Item>,
    list_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    addLast: ::std::option::Option<bool>,
    addFirst: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Add {
    fn default() -> &'a Add {
        <Add as ::protobuf::Message>::default_instance()
    }
}

impl Add {
    pub fn new() -> Add {
        ::std::default::Default::default()
    }

    // optional int32 fromIndex = 1;

    pub fn get_fromIndex(&self) -> i32 {
        self.fromIndex.unwrap_or(0)
    }
    pub fn clear_fromIndex(&mut self) {
        self.fromIndex = ::std::option::Option::None;
    }

    pub fn has_fromIndex(&self) -> bool {
        self.fromIndex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fromIndex(&mut self, v: i32) {
        self.fromIndex = ::std::option::Option::Some(v);
    }

    // repeated .Item items = 2;

    pub fn get_items(&self) -> &[super::playlist4content::Item] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<super::playlist4content::Item>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<super::playlist4content::Item> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<super::playlist4content::Item> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }

    // optional .ListChecksum list_checksum = 3;

    pub fn get_list_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.list_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_list_checksum(&mut self) {
        self.list_checksum.clear();
    }

    pub fn has_list_checksum(&self) -> bool {
        self.list_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.list_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_list_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.list_checksum.is_none() {
            self.list_checksum.set_default();
        }
        self.list_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_list_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.list_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional bool addLast = 4;

    pub fn get_addLast(&self) -> bool {
        self.addLast.unwrap_or(false)
    }
    pub fn clear_addLast(&mut self) {
        self.addLast = ::std::option::Option::None;
    }

    pub fn has_addLast(&self) -> bool {
        self.addLast.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addLast(&mut self, v: bool) {
        self.addLast = ::std::option::Option::Some(v);
    }

    // optional bool addFirst = 5;

    pub fn get_addFirst(&self) -> bool {
        self.addFirst.unwrap_or(false)
    }
    pub fn clear_addFirst(&mut self) {
        self.addFirst = ::std::option::Option::None;
    }

    pub fn has_addFirst(&self) -> bool {
        self.addFirst.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addFirst(&mut self, v: bool) {
        self.addFirst = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Add {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.list_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.fromIndex = ::std::option::Option::Some(tmp);
                }
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                }
                3 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.list_checksum,
                    )?;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.addLast = ::std::option::Option::Some(tmp);
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.addFirst = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.fromIndex {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.addLast {
            my_size += 2;
        }
        if let Some(v) = self.addFirst {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.fromIndex {
            os.write_int32(1, v)?;
        }
        for v in &self.items {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.addLast {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.addFirst {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Add {
        Add::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "fromIndex",
                    |m: &Add| &m.fromIndex,
                    |m: &mut Add| &mut m.fromIndex,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4content::Item>,
                    >("items", |m: &Add| &m.items, |m: &mut Add| &mut m.items),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "list_checksum",
                        |m: &Add| &m.list_checksum,
                        |m: &mut Add| &mut m.list_checksum,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeBool,
                >(
                    "addLast",
                    |m: &Add| &m.addLast,
                    |m: &mut Add| &mut m.addLast,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeBool,
                >(
                    "addFirst",
                    |m: &Add| &m.addFirst,
                    |m: &mut Add| &mut m.addFirst,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Add>(
                    "Add",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Add {
        static mut instance: ::protobuf::lazy::Lazy<Add> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Add,
        };
        unsafe { instance.get(Add::new) }
    }
}

impl ::protobuf::Clear for Add {
    fn clear(&mut self) {
        self.fromIndex = ::std::option::Option::None;
        self.items.clear();
        self.list_checksum.clear();
        self.addLast = ::std::option::Option::None;
        self.addFirst = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Add {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Add {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Rem {
    // message fields
    fromIndex: ::std::option::Option<i32>,
    length: ::std::option::Option<i32>,
    items: ::protobuf::RepeatedField<super::playlist4content::Item>,
    list_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    items_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    uris_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    itemsAsKey: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rem {
    fn default() -> &'a Rem {
        <Rem as ::protobuf::Message>::default_instance()
    }
}

impl Rem {
    pub fn new() -> Rem {
        ::std::default::Default::default()
    }

    // optional int32 fromIndex = 1;

    pub fn get_fromIndex(&self) -> i32 {
        self.fromIndex.unwrap_or(0)
    }
    pub fn clear_fromIndex(&mut self) {
        self.fromIndex = ::std::option::Option::None;
    }

    pub fn has_fromIndex(&self) -> bool {
        self.fromIndex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fromIndex(&mut self, v: i32) {
        self.fromIndex = ::std::option::Option::Some(v);
    }

    // optional int32 length = 2;

    pub fn get_length(&self) -> i32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i32) {
        self.length = ::std::option::Option::Some(v);
    }

    // repeated .Item items = 3;

    pub fn get_items(&self) -> &[super::playlist4content::Item] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<super::playlist4content::Item>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<super::playlist4content::Item> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<super::playlist4content::Item> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }

    // optional .ListChecksum list_checksum = 4;

    pub fn get_list_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.list_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_list_checksum(&mut self) {
        self.list_checksum.clear();
    }

    pub fn has_list_checksum(&self) -> bool {
        self.list_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.list_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_list_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.list_checksum.is_none() {
            self.list_checksum.set_default();
        }
        self.list_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_list_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.list_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional .ListChecksum items_checksum = 5;

    pub fn get_items_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.items_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_items_checksum(&mut self) {
        self.items_checksum.clear();
    }

    pub fn has_items_checksum(&self) -> bool {
        self.items_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.items_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_items_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.items_checksum.is_none() {
            self.items_checksum.set_default();
        }
        self.items_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_items_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.items_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional .ListChecksum uris_checksum = 6;

    pub fn get_uris_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.uris_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_uris_checksum(&mut self) {
        self.uris_checksum.clear();
    }

    pub fn has_uris_checksum(&self) -> bool {
        self.uris_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uris_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.uris_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uris_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.uris_checksum.is_none() {
            self.uris_checksum.set_default();
        }
        self.uris_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_uris_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.uris_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional bool itemsAsKey = 7;

    pub fn get_itemsAsKey(&self) -> bool {
        self.itemsAsKey.unwrap_or(false)
    }
    pub fn clear_itemsAsKey(&mut self) {
        self.itemsAsKey = ::std::option::Option::None;
    }

    pub fn has_itemsAsKey(&self) -> bool {
        self.itemsAsKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_itemsAsKey(&mut self, v: bool) {
        self.itemsAsKey = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Rem {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.list_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.items_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.uris_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.fromIndex = ::std::option::Option::Some(tmp);
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.length = ::std::option::Option::Some(tmp);
                }
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.list_checksum,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.items_checksum,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.uris_checksum,
                    )?;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.itemsAsKey = ::std::option::Option::Some(tmp);
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.fromIndex {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.items_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.uris_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.itemsAsKey {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.fromIndex {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_int32(2, v)?;
        }
        for v in &self.items {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.items_checksum.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.uris_checksum.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.itemsAsKey {
            os.write_bool(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rem {
        Rem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "fromIndex",
                    |m: &Rem| &m.fromIndex,
                    |m: &mut Rem| &mut m.fromIndex,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "length", |m: &Rem| &m.length, |m: &mut Rem| &mut m.length
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4content::Item>,
                    >("items", |m: &Rem| &m.items, |m: &mut Rem| &mut m.items),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "list_checksum",
                        |m: &Rem| &m.list_checksum,
                        |m: &mut Rem| &mut m.list_checksum,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "items_checksum",
                        |m: &Rem| &m.items_checksum,
                        |m: &mut Rem| &mut m.items_checksum,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "uris_checksum",
                        |m: &Rem| &m.uris_checksum,
                        |m: &mut Rem| &mut m.uris_checksum,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeBool,
                >(
                    "itemsAsKey",
                    |m: &Rem| &m.itemsAsKey,
                    |m: &mut Rem| &mut m.itemsAsKey,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Rem>(
                    "Rem",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Rem {
        static mut instance: ::protobuf::lazy::Lazy<Rem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Rem,
        };
        unsafe { instance.get(Rem::new) }
    }
}

impl ::protobuf::Clear for Rem {
    fn clear(&mut self) {
        self.fromIndex = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.items.clear();
        self.list_checksum.clear();
        self.items_checksum.clear();
        self.uris_checksum.clear();
        self.itemsAsKey = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Mov {
    // message fields
    fromIndex: ::std::option::Option<i32>,
    length: ::std::option::Option<i32>,
    toIndex: ::std::option::Option<i32>,
    list_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    items_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    uris_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mov {
    fn default() -> &'a Mov {
        <Mov as ::protobuf::Message>::default_instance()
    }
}

impl Mov {
    pub fn new() -> Mov {
        ::std::default::Default::default()
    }

    // optional int32 fromIndex = 1;

    pub fn get_fromIndex(&self) -> i32 {
        self.fromIndex.unwrap_or(0)
    }
    pub fn clear_fromIndex(&mut self) {
        self.fromIndex = ::std::option::Option::None;
    }

    pub fn has_fromIndex(&self) -> bool {
        self.fromIndex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fromIndex(&mut self, v: i32) {
        self.fromIndex = ::std::option::Option::Some(v);
    }

    // optional int32 length = 2;

    pub fn get_length(&self) -> i32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i32) {
        self.length = ::std::option::Option::Some(v);
    }

    // optional int32 toIndex = 3;

    pub fn get_toIndex(&self) -> i32 {
        self.toIndex.unwrap_or(0)
    }
    pub fn clear_toIndex(&mut self) {
        self.toIndex = ::std::option::Option::None;
    }

    pub fn has_toIndex(&self) -> bool {
        self.toIndex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_toIndex(&mut self, v: i32) {
        self.toIndex = ::std::option::Option::Some(v);
    }

    // optional .ListChecksum list_checksum = 4;

    pub fn get_list_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.list_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_list_checksum(&mut self) {
        self.list_checksum.clear();
    }

    pub fn has_list_checksum(&self) -> bool {
        self.list_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.list_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_list_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.list_checksum.is_none() {
            self.list_checksum.set_default();
        }
        self.list_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_list_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.list_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional .ListChecksum items_checksum = 5;

    pub fn get_items_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.items_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_items_checksum(&mut self) {
        self.items_checksum.clear();
    }

    pub fn has_items_checksum(&self) -> bool {
        self.items_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.items_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_items_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.items_checksum.is_none() {
            self.items_checksum.set_default();
        }
        self.items_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_items_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.items_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional .ListChecksum uris_checksum = 6;

    pub fn get_uris_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.uris_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_uris_checksum(&mut self) {
        self.uris_checksum.clear();
    }

    pub fn has_uris_checksum(&self) -> bool {
        self.uris_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uris_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.uris_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uris_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.uris_checksum.is_none() {
            self.uris_checksum.set_default();
        }
        self.uris_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_uris_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.uris_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }
}

impl ::protobuf::Message for Mov {
    fn is_initialized(&self) -> bool {
        for v in &self.list_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.items_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.uris_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.fromIndex = ::std::option::Option::Some(tmp);
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.length = ::std::option::Option::Some(tmp);
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.toIndex = ::std::option::Option::Some(tmp);
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.list_checksum,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.items_checksum,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.uris_checksum,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.fromIndex {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.toIndex {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.items_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.uris_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.fromIndex {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.toIndex {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.items_checksum.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.uris_checksum.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mov {
        Mov::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "fromIndex",
                    |m: &Mov| &m.fromIndex,
                    |m: &mut Mov| &mut m.fromIndex,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "length", |m: &Mov| &m.length, |m: &mut Mov| &mut m.length
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "toIndex",
                    |m: &Mov| &m.toIndex,
                    |m: &mut Mov| &mut m.toIndex,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "list_checksum",
                        |m: &Mov| &m.list_checksum,
                        |m: &mut Mov| &mut m.list_checksum,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "items_checksum",
                        |m: &Mov| &m.items_checksum,
                        |m: &mut Mov| &mut m.items_checksum,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "uris_checksum",
                        |m: &Mov| &m.uris_checksum,
                        |m: &mut Mov| &mut m.uris_checksum,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<Mov>(
                    "Mov",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Mov {
        static mut instance: ::protobuf::lazy::Lazy<Mov> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Mov,
        };
        unsafe { instance.get(Mov::new) }
    }
}

impl ::protobuf::Clear for Mov {
    fn clear(&mut self) {
        self.fromIndex = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.toIndex = ::std::option::Option::None;
        self.list_checksum.clear();
        self.items_checksum.clear();
        self.uris_checksum.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mov {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mov {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ItemAttributesPartialState {
    // message fields
    values: ::protobuf::SingularPtrField<super::playlist4meta::ItemAttributes>,
    no_value: ::std::vec::Vec<ItemAttributesPartialState_ItemAttributeKind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ItemAttributesPartialState {
    fn default() -> &'a ItemAttributesPartialState {
        <ItemAttributesPartialState as ::protobuf::Message>::default_instance()
    }
}

impl ItemAttributesPartialState {
    pub fn new() -> ItemAttributesPartialState {
        ::std::default::Default::default()
    }

    // optional .ItemAttributes values = 1;

    pub fn get_values(&self) -> &super::playlist4meta::ItemAttributes {
        self.values
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ItemAttributes::default_instance())
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    pub fn has_values(&self) -> bool {
        self.values.is_some()
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: super::playlist4meta::ItemAttributes) {
        self.values = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_values(&mut self) -> &mut super::playlist4meta::ItemAttributes {
        if self.values.is_none() {
            self.values.set_default();
        }
        self.values.as_mut().unwrap()
    }

    // Take field
    pub fn take_values(&mut self) -> super::playlist4meta::ItemAttributes {
        self.values
            .take()
            .unwrap_or_else(|| super::playlist4meta::ItemAttributes::new())
    }

    // repeated .ItemAttributesPartialState.ItemAttributeKind no_value = 2;

    pub fn get_no_value(&self) -> &[ItemAttributesPartialState_ItemAttributeKind] {
        &self.no_value
    }
    pub fn clear_no_value(&mut self) {
        self.no_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_no_value(
        &mut self,
        v: ::std::vec::Vec<ItemAttributesPartialState_ItemAttributeKind>,
    ) {
        self.no_value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_no_value(
        &mut self,
    ) -> &mut ::std::vec::Vec<ItemAttributesPartialState_ItemAttributeKind> {
        &mut self.no_value
    }

    // Take field
    pub fn take_no_value(
        &mut self,
    ) -> ::std::vec::Vec<ItemAttributesPartialState_ItemAttributeKind> {
        ::std::mem::replace(&mut self.no_value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ItemAttributesPartialState {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.values)?;
                }
                2 => ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.no_value,
                    2,
                    &mut self.unknown_fields,
                )?,
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.no_value {
            my_size += ::protobuf::rt::enum_size(2, *value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.values.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.no_value {
            os.write_enum(2, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ItemAttributesPartialState {
        ItemAttributesPartialState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<
                            super::playlist4meta::ItemAttributes,
                        >,
                    >(
                        "values",
                        |m: &ItemAttributesPartialState| &m.values,
                        |m: &mut ItemAttributesPartialState| &mut m.values,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeEnum<
                        ItemAttributesPartialState_ItemAttributeKind,
                    >,
                >(
                    "no_value",
                    |m: &ItemAttributesPartialState| &m.no_value,
                    |m: &mut ItemAttributesPartialState| &mut m.no_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ItemAttributesPartialState>(
                    "ItemAttributesPartialState",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ItemAttributesPartialState {
        static mut instance: ::protobuf::lazy::Lazy<ItemAttributesPartialState> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ItemAttributesPartialState,
            };
        unsafe { instance.get(ItemAttributesPartialState::new) }
    }
}

impl ::protobuf::Clear for ItemAttributesPartialState {
    fn clear(&mut self) {
        self.values.clear();
        self.no_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ItemAttributesPartialState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemAttributesPartialState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum ItemAttributesPartialState_ItemAttributeKind {
    ITEM_UNKNOWN = 0,
    ITEM_ADDED_BY = 1,
    ITEM_TIMESTAMP = 2,
    ITEM_MESSAGE = 3,
    ITEM_SEEN = 4,
    ITEM_DOWNLOAD_COUNT = 5,
    ITEM_DOWNLOAD_FORMAT = 6,
    ITEM_SEVENDIGITAL_ID = 7,
    ITEM_SEVENDIGITAL_LEFT = 8,
    ITEM_SEEN_AT = 9,
    ITEM_PUBLIC = 10,
}

impl ::protobuf::ProtobufEnum for ItemAttributesPartialState_ItemAttributeKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ItemAttributesPartialState_ItemAttributeKind> {
        match value {
            0 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_UNKNOWN,
            ),
            1 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_ADDED_BY,
            ),
            2 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_TIMESTAMP,
            ),
            3 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_MESSAGE,
            ),
            4 => {
                ::std::option::Option::Some(ItemAttributesPartialState_ItemAttributeKind::ITEM_SEEN)
            }
            5 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_DOWNLOAD_COUNT,
            ),
            6 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_DOWNLOAD_FORMAT,
            ),
            7 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_SEVENDIGITAL_ID,
            ),
            8 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_SEVENDIGITAL_LEFT,
            ),
            9 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_SEEN_AT,
            ),
            10 => ::std::option::Option::Some(
                ItemAttributesPartialState_ItemAttributeKind::ITEM_PUBLIC,
            ),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ItemAttributesPartialState_ItemAttributeKind] = &[
            ItemAttributesPartialState_ItemAttributeKind::ITEM_UNKNOWN,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_ADDED_BY,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_TIMESTAMP,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_MESSAGE,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_SEEN,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_DOWNLOAD_COUNT,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_DOWNLOAD_FORMAT,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_SEVENDIGITAL_ID,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_SEVENDIGITAL_LEFT,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_SEEN_AT,
            ItemAttributesPartialState_ItemAttributeKind::ITEM_PUBLIC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new(
                    "ItemAttributesPartialState_ItemAttributeKind",
                    file_descriptor_proto(),
                )
            })
        }
    }
}

impl ::std::marker::Copy for ItemAttributesPartialState_ItemAttributeKind {}

impl ::std::default::Default for ItemAttributesPartialState_ItemAttributeKind {
    fn default() -> Self {
        ItemAttributesPartialState_ItemAttributeKind::ITEM_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ItemAttributesPartialState_ItemAttributeKind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ListAttributesPartialState {
    // message fields
    values: ::protobuf::SingularPtrField<super::playlist4meta::ListAttributes>,
    no_value: ::std::vec::Vec<ListAttributesPartialState_ListAttributeKind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAttributesPartialState {
    fn default() -> &'a ListAttributesPartialState {
        <ListAttributesPartialState as ::protobuf::Message>::default_instance()
    }
}

impl ListAttributesPartialState {
    pub fn new() -> ListAttributesPartialState {
        ::std::default::Default::default()
    }

    // optional .ListAttributes values = 1;

    pub fn get_values(&self) -> &super::playlist4meta::ListAttributes {
        self.values
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListAttributes::default_instance())
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    pub fn has_values(&self) -> bool {
        self.values.is_some()
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: super::playlist4meta::ListAttributes) {
        self.values = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_values(&mut self) -> &mut super::playlist4meta::ListAttributes {
        if self.values.is_none() {
            self.values.set_default();
        }
        self.values.as_mut().unwrap()
    }

    // Take field
    pub fn take_values(&mut self) -> super::playlist4meta::ListAttributes {
        self.values
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListAttributes::new())
    }

    // repeated .ListAttributesPartialState.ListAttributeKind no_value = 2;

    pub fn get_no_value(&self) -> &[ListAttributesPartialState_ListAttributeKind] {
        &self.no_value
    }
    pub fn clear_no_value(&mut self) {
        self.no_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_no_value(
        &mut self,
        v: ::std::vec::Vec<ListAttributesPartialState_ListAttributeKind>,
    ) {
        self.no_value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_no_value(
        &mut self,
    ) -> &mut ::std::vec::Vec<ListAttributesPartialState_ListAttributeKind> {
        &mut self.no_value
    }

    // Take field
    pub fn take_no_value(
        &mut self,
    ) -> ::std::vec::Vec<ListAttributesPartialState_ListAttributeKind> {
        ::std::mem::replace(&mut self.no_value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ListAttributesPartialState {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.values)?;
                }
                2 => ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.no_value,
                    2,
                    &mut self.unknown_fields,
                )?,
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.no_value {
            my_size += ::protobuf::rt::enum_size(2, *value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.values.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.no_value {
            os.write_enum(2, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAttributesPartialState {
        ListAttributesPartialState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<
                            super::playlist4meta::ListAttributes,
                        >,
                    >(
                        "values",
                        |m: &ListAttributesPartialState| &m.values,
                        |m: &mut ListAttributesPartialState| &mut m.values,
                    ),
                );
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeEnum<
                        ListAttributesPartialState_ListAttributeKind,
                    >,
                >(
                    "no_value",
                    |m: &ListAttributesPartialState| &m.no_value,
                    |m: &mut ListAttributesPartialState| &mut m.no_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListAttributesPartialState>(
                    "ListAttributesPartialState",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ListAttributesPartialState {
        static mut instance: ::protobuf::lazy::Lazy<ListAttributesPartialState> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ListAttributesPartialState,
            };
        unsafe { instance.get(ListAttributesPartialState::new) }
    }
}

impl ::protobuf::Clear for ListAttributesPartialState {
    fn clear(&mut self) {
        self.values.clear();
        self.no_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAttributesPartialState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAttributesPartialState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum ListAttributesPartialState_ListAttributeKind {
    LIST_UNKNOWN = 0,
    LIST_NAME = 1,
    LIST_DESCRIPTION = 2,
    LIST_PICTURE = 3,
    LIST_COLLABORATIVE = 4,
    LIST_PL3_VERSION = 5,
    LIST_DELETED_BY_OWNER = 6,
    LIST_RESTRICTED_COLLABORATIVE = 7,
}

impl ::protobuf::ProtobufEnum for ListAttributesPartialState_ListAttributeKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ListAttributesPartialState_ListAttributeKind> {
        match value {
            0 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_UNKNOWN,
            ),
            1 => {
                ::std::option::Option::Some(ListAttributesPartialState_ListAttributeKind::LIST_NAME)
            }
            2 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_DESCRIPTION,
            ),
            3 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_PICTURE,
            ),
            4 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_COLLABORATIVE,
            ),
            5 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_PL3_VERSION,
            ),
            6 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_DELETED_BY_OWNER,
            ),
            7 => ::std::option::Option::Some(
                ListAttributesPartialState_ListAttributeKind::LIST_RESTRICTED_COLLABORATIVE,
            ),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ListAttributesPartialState_ListAttributeKind] = &[
            ListAttributesPartialState_ListAttributeKind::LIST_UNKNOWN,
            ListAttributesPartialState_ListAttributeKind::LIST_NAME,
            ListAttributesPartialState_ListAttributeKind::LIST_DESCRIPTION,
            ListAttributesPartialState_ListAttributeKind::LIST_PICTURE,
            ListAttributesPartialState_ListAttributeKind::LIST_COLLABORATIVE,
            ListAttributesPartialState_ListAttributeKind::LIST_PL3_VERSION,
            ListAttributesPartialState_ListAttributeKind::LIST_DELETED_BY_OWNER,
            ListAttributesPartialState_ListAttributeKind::LIST_RESTRICTED_COLLABORATIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new(
                    "ListAttributesPartialState_ListAttributeKind",
                    file_descriptor_proto(),
                )
            })
        }
    }
}

impl ::std::marker::Copy for ListAttributesPartialState_ListAttributeKind {}

impl ::std::default::Default for ListAttributesPartialState_ListAttributeKind {
    fn default() -> Self {
        ListAttributesPartialState_ListAttributeKind::LIST_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAttributesPartialState_ListAttributeKind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct UpdateItemAttributes {
    // message fields
    index: ::std::option::Option<i32>,
    new_attributes: ::protobuf::SingularPtrField<ItemAttributesPartialState>,
    old_attributes: ::protobuf::SingularPtrField<ItemAttributesPartialState>,
    list_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    old_attributes_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateItemAttributes {
    fn default() -> &'a UpdateItemAttributes {
        <UpdateItemAttributes as ::protobuf::Message>::default_instance()
    }
}

impl UpdateItemAttributes {
    pub fn new() -> UpdateItemAttributes {
        ::std::default::Default::default()
    }

    // optional int32 index = 1;

    pub fn get_index(&self) -> i32 {
        self.index.unwrap_or(0)
    }
    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.index = ::std::option::Option::Some(v);
    }

    // optional .ItemAttributesPartialState new_attributes = 2;

    pub fn get_new_attributes(&self) -> &ItemAttributesPartialState {
        self.new_attributes
            .as_ref()
            .unwrap_or_else(|| ItemAttributesPartialState::default_instance())
    }
    pub fn clear_new_attributes(&mut self) {
        self.new_attributes.clear();
    }

    pub fn has_new_attributes(&self) -> bool {
        self.new_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_attributes(&mut self, v: ItemAttributesPartialState) {
        self.new_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_attributes(&mut self) -> &mut ItemAttributesPartialState {
        if self.new_attributes.is_none() {
            self.new_attributes.set_default();
        }
        self.new_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_attributes(&mut self) -> ItemAttributesPartialState {
        self.new_attributes
            .take()
            .unwrap_or_else(|| ItemAttributesPartialState::new())
    }

    // optional .ItemAttributesPartialState old_attributes = 3;

    pub fn get_old_attributes(&self) -> &ItemAttributesPartialState {
        self.old_attributes
            .as_ref()
            .unwrap_or_else(|| ItemAttributesPartialState::default_instance())
    }
    pub fn clear_old_attributes(&mut self) {
        self.old_attributes.clear();
    }

    pub fn has_old_attributes(&self) -> bool {
        self.old_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_old_attributes(&mut self, v: ItemAttributesPartialState) {
        self.old_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_attributes(&mut self) -> &mut ItemAttributesPartialState {
        if self.old_attributes.is_none() {
            self.old_attributes.set_default();
        }
        self.old_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_old_attributes(&mut self) -> ItemAttributesPartialState {
        self.old_attributes
            .take()
            .unwrap_or_else(|| ItemAttributesPartialState::new())
    }

    // optional .ListChecksum list_checksum = 4;

    pub fn get_list_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.list_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_list_checksum(&mut self) {
        self.list_checksum.clear();
    }

    pub fn has_list_checksum(&self) -> bool {
        self.list_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.list_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_list_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.list_checksum.is_none() {
            self.list_checksum.set_default();
        }
        self.list_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_list_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.list_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional .ListChecksum old_attributes_checksum = 5;

    pub fn get_old_attributes_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.old_attributes_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_old_attributes_checksum(&mut self) {
        self.old_attributes_checksum.clear();
    }

    pub fn has_old_attributes_checksum(&self) -> bool {
        self.old_attributes_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_old_attributes_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.old_attributes_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_attributes_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.old_attributes_checksum.is_none() {
            self.old_attributes_checksum.set_default();
        }
        self.old_attributes_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_old_attributes_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.old_attributes_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }
}

impl ::protobuf::Message for UpdateItemAttributes {
    fn is_initialized(&self) -> bool {
        for v in &self.new_attributes {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.old_attributes {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.list_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.old_attributes_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.index = ::std::option::Option::Some(tmp);
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.new_attributes,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.old_attributes,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.list_checksum,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.old_attributes_checksum,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.new_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.old_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.old_attributes_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.index {
            os.write_int32(1, v)?;
        }
        if let Some(ref v) = self.new_attributes.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.old_attributes.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.old_attributes_checksum.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateItemAttributes {
        UpdateItemAttributes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt32,
                >(
                    "index",
                    |m: &UpdateItemAttributes| &m.index,
                    |m: &mut UpdateItemAttributes| &mut m.index,
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<ItemAttributesPartialState>,
                    >(
                        "new_attributes",
                        |m: &UpdateItemAttributes| &m.new_attributes,
                        |m: &mut UpdateItemAttributes| &mut m.new_attributes,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<ItemAttributesPartialState>,
                    >(
                        "old_attributes",
                        |m: &UpdateItemAttributes| &m.old_attributes,
                        |m: &mut UpdateItemAttributes| &mut m.old_attributes,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "list_checksum",
                        |m: &UpdateItemAttributes| &m.list_checksum,
                        |m: &mut UpdateItemAttributes| &mut m.list_checksum,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "old_attributes_checksum",
                        |m: &UpdateItemAttributes| &m.old_attributes_checksum,
                        |m: &mut UpdateItemAttributes| &mut m.old_attributes_checksum,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<UpdateItemAttributes>(
                    "UpdateItemAttributes",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateItemAttributes {
        static mut instance: ::protobuf::lazy::Lazy<UpdateItemAttributes> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const UpdateItemAttributes,
            };
        unsafe { instance.get(UpdateItemAttributes::new) }
    }
}

impl ::protobuf::Clear for UpdateItemAttributes {
    fn clear(&mut self) {
        self.index = ::std::option::Option::None;
        self.new_attributes.clear();
        self.old_attributes.clear();
        self.list_checksum.clear();
        self.old_attributes_checksum.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateItemAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateItemAttributes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct UpdateListAttributes {
    // message fields
    new_attributes: ::protobuf::SingularPtrField<ListAttributesPartialState>,
    old_attributes: ::protobuf::SingularPtrField<ListAttributesPartialState>,
    list_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    old_attributes_checksum: ::protobuf::SingularPtrField<super::playlist4meta::ListChecksum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateListAttributes {
    fn default() -> &'a UpdateListAttributes {
        <UpdateListAttributes as ::protobuf::Message>::default_instance()
    }
}

impl UpdateListAttributes {
    pub fn new() -> UpdateListAttributes {
        ::std::default::Default::default()
    }

    // optional .ListAttributesPartialState new_attributes = 1;

    pub fn get_new_attributes(&self) -> &ListAttributesPartialState {
        self.new_attributes
            .as_ref()
            .unwrap_or_else(|| ListAttributesPartialState::default_instance())
    }
    pub fn clear_new_attributes(&mut self) {
        self.new_attributes.clear();
    }

    pub fn has_new_attributes(&self) -> bool {
        self.new_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_attributes(&mut self, v: ListAttributesPartialState) {
        self.new_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_attributes(&mut self) -> &mut ListAttributesPartialState {
        if self.new_attributes.is_none() {
            self.new_attributes.set_default();
        }
        self.new_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_attributes(&mut self) -> ListAttributesPartialState {
        self.new_attributes
            .take()
            .unwrap_or_else(|| ListAttributesPartialState::new())
    }

    // optional .ListAttributesPartialState old_attributes = 2;

    pub fn get_old_attributes(&self) -> &ListAttributesPartialState {
        self.old_attributes
            .as_ref()
            .unwrap_or_else(|| ListAttributesPartialState::default_instance())
    }
    pub fn clear_old_attributes(&mut self) {
        self.old_attributes.clear();
    }

    pub fn has_old_attributes(&self) -> bool {
        self.old_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_old_attributes(&mut self, v: ListAttributesPartialState) {
        self.old_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_attributes(&mut self) -> &mut ListAttributesPartialState {
        if self.old_attributes.is_none() {
            self.old_attributes.set_default();
        }
        self.old_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_old_attributes(&mut self) -> ListAttributesPartialState {
        self.old_attributes
            .take()
            .unwrap_or_else(|| ListAttributesPartialState::new())
    }

    // optional .ListChecksum list_checksum = 3;

    pub fn get_list_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.list_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_list_checksum(&mut self) {
        self.list_checksum.clear();
    }

    pub fn has_list_checksum(&self) -> bool {
        self.list_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.list_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_list_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.list_checksum.is_none() {
            self.list_checksum.set_default();
        }
        self.list_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_list_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.list_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }

    // optional .ListChecksum old_attributes_checksum = 4;

    pub fn get_old_attributes_checksum(&self) -> &super::playlist4meta::ListChecksum {
        self.old_attributes_checksum
            .as_ref()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::default_instance())
    }
    pub fn clear_old_attributes_checksum(&mut self) {
        self.old_attributes_checksum.clear();
    }

    pub fn has_old_attributes_checksum(&self) -> bool {
        self.old_attributes_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_old_attributes_checksum(&mut self, v: super::playlist4meta::ListChecksum) {
        self.old_attributes_checksum = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_attributes_checksum(&mut self) -> &mut super::playlist4meta::ListChecksum {
        if self.old_attributes_checksum.is_none() {
            self.old_attributes_checksum.set_default();
        }
        self.old_attributes_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_old_attributes_checksum(&mut self) -> super::playlist4meta::ListChecksum {
        self.old_attributes_checksum
            .take()
            .unwrap_or_else(|| super::playlist4meta::ListChecksum::new())
    }
}

impl ::protobuf::Message for UpdateListAttributes {
    fn is_initialized(&self) -> bool {
        for v in &self.new_attributes {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.old_attributes {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.list_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.old_attributes_checksum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.new_attributes,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.old_attributes,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.list_checksum,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.old_attributes_checksum,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.new_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.old_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.old_attributes_checksum.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.new_attributes.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.old_attributes.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.list_checksum.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.old_attributes_checksum.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateListAttributes {
        UpdateListAttributes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<ListAttributesPartialState>,
                    >(
                        "new_attributes",
                        |m: &UpdateListAttributes| &m.new_attributes,
                        |m: &mut UpdateListAttributes| &mut m.new_attributes,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<ListAttributesPartialState>,
                    >(
                        "old_attributes",
                        |m: &UpdateListAttributes| &m.old_attributes,
                        |m: &mut UpdateListAttributes| &mut m.old_attributes,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "list_checksum",
                        |m: &UpdateListAttributes| &m.list_checksum,
                        |m: &mut UpdateListAttributes| &mut m.list_checksum,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<super::playlist4meta::ListChecksum>,
                    >(
                        "old_attributes_checksum",
                        |m: &UpdateListAttributes| &m.old_attributes_checksum,
                        |m: &mut UpdateListAttributes| &mut m.old_attributes_checksum,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<UpdateListAttributes>(
                    "UpdateListAttributes",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateListAttributes {
        static mut instance: ::protobuf::lazy::Lazy<UpdateListAttributes> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const UpdateListAttributes,
            };
        unsafe { instance.get(UpdateListAttributes::new) }
    }
}

impl ::protobuf::Clear for UpdateListAttributes {
    fn clear(&mut self) {
        self.new_attributes.clear();
        self.old_attributes.clear();
        self.list_checksum.clear();
        self.old_attributes_checksum.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateListAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateListAttributes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Op {
    // message fields
    kind: ::std::option::Option<Op_Kind>,
    add: ::protobuf::SingularPtrField<Add>,
    rem: ::protobuf::SingularPtrField<Rem>,
    mov: ::protobuf::SingularPtrField<Mov>,
    update_item_attributes: ::protobuf::SingularPtrField<UpdateItemAttributes>,
    update_list_attributes: ::protobuf::SingularPtrField<UpdateListAttributes>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Op {
    fn default() -> &'a Op {
        <Op as ::protobuf::Message>::default_instance()
    }
}

impl Op {
    pub fn new() -> Op {
        ::std::default::Default::default()
    }

    // optional .Op.Kind kind = 1;

    pub fn get_kind(&self) -> Op_Kind {
        self.kind.unwrap_or(Op_Kind::KIND_UNKNOWN)
    }
    pub fn clear_kind(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_kind(&self) -> bool {
        self.kind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: Op_Kind) {
        self.kind = ::std::option::Option::Some(v);
    }

    // optional .Add add = 2;

    pub fn get_add(&self) -> &Add {
        self.add.as_ref().unwrap_or_else(|| Add::default_instance())
    }
    pub fn clear_add(&mut self) {
        self.add.clear();
    }

    pub fn has_add(&self) -> bool {
        self.add.is_some()
    }

    // Param is passed by value, moved
    pub fn set_add(&mut self, v: Add) {
        self.add = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add(&mut self) -> &mut Add {
        if self.add.is_none() {
            self.add.set_default();
        }
        self.add.as_mut().unwrap()
    }

    // Take field
    pub fn take_add(&mut self) -> Add {
        self.add.take().unwrap_or_else(|| Add::new())
    }

    // optional .Rem rem = 3;

    pub fn get_rem(&self) -> &Rem {
        self.rem.as_ref().unwrap_or_else(|| Rem::default_instance())
    }
    pub fn clear_rem(&mut self) {
        self.rem.clear();
    }

    pub fn has_rem(&self) -> bool {
        self.rem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rem(&mut self, v: Rem) {
        self.rem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rem(&mut self) -> &mut Rem {
        if self.rem.is_none() {
            self.rem.set_default();
        }
        self.rem.as_mut().unwrap()
    }

    // Take field
    pub fn take_rem(&mut self) -> Rem {
        self.rem.take().unwrap_or_else(|| Rem::new())
    }

    // optional .Mov mov = 4;

    pub fn get_mov(&self) -> &Mov {
        self.mov.as_ref().unwrap_or_else(|| Mov::default_instance())
    }
    pub fn clear_mov(&mut self) {
        self.mov.clear();
    }

    pub fn has_mov(&self) -> bool {
        self.mov.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mov(&mut self, v: Mov) {
        self.mov = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mov(&mut self) -> &mut Mov {
        if self.mov.is_none() {
            self.mov.set_default();
        }
        self.mov.as_mut().unwrap()
    }

    // Take field
    pub fn take_mov(&mut self) -> Mov {
        self.mov.take().unwrap_or_else(|| Mov::new())
    }

    // optional .UpdateItemAttributes update_item_attributes = 5;

    pub fn get_update_item_attributes(&self) -> &UpdateItemAttributes {
        self.update_item_attributes
            .as_ref()
            .unwrap_or_else(|| UpdateItemAttributes::default_instance())
    }
    pub fn clear_update_item_attributes(&mut self) {
        self.update_item_attributes.clear();
    }

    pub fn has_update_item_attributes(&self) -> bool {
        self.update_item_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_item_attributes(&mut self, v: UpdateItemAttributes) {
        self.update_item_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_item_attributes(&mut self) -> &mut UpdateItemAttributes {
        if self.update_item_attributes.is_none() {
            self.update_item_attributes.set_default();
        }
        self.update_item_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_item_attributes(&mut self) -> UpdateItemAttributes {
        self.update_item_attributes
            .take()
            .unwrap_or_else(|| UpdateItemAttributes::new())
    }

    // optional .UpdateListAttributes update_list_attributes = 6;

    pub fn get_update_list_attributes(&self) -> &UpdateListAttributes {
        self.update_list_attributes
            .as_ref()
            .unwrap_or_else(|| UpdateListAttributes::default_instance())
    }
    pub fn clear_update_list_attributes(&mut self) {
        self.update_list_attributes.clear();
    }

    pub fn has_update_list_attributes(&self) -> bool {
        self.update_list_attributes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_list_attributes(&mut self, v: UpdateListAttributes) {
        self.update_list_attributes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_list_attributes(&mut self) -> &mut UpdateListAttributes {
        if self.update_list_attributes.is_none() {
            self.update_list_attributes.set_default();
        }
        self.update_list_attributes.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_list_attributes(&mut self) -> UpdateListAttributes {
        self.update_list_attributes
            .take()
            .unwrap_or_else(|| UpdateListAttributes::new())
    }
}

impl ::protobuf::Message for Op {
    fn is_initialized(&self) -> bool {
        for v in &self.add {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.rem {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.mov {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.update_item_attributes {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.update_list_attributes {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(
                    wire_type,
                    is,
                    &mut self.kind,
                    1,
                    &mut self.unknown_fields,
                )?,
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.add)?;
                }
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rem)?;
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mov)?;
                }
                5 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.update_item_attributes,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.update_list_attributes,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.kind {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.add.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mov.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_item_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_list_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.kind {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.add.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rem.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mov.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_item_attributes.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_list_attributes.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Op {
        Op::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeEnum<Op_Kind>,
                >(
                    "kind", |m: &Op| &m.kind, |m: &mut Op| &mut m.kind
                ));
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Add>,
                    >("add", |m: &Op| &m.add, |m: &mut Op| &mut m.add),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Rem>,
                    >("rem", |m: &Op| &m.rem, |m: &mut Op| &mut m.rem),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Mov>,
                    >("mov", |m: &Op| &m.mov, |m: &mut Op| &mut m.mov),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<UpdateItemAttributes>,
                    >(
                        "update_item_attributes",
                        |m: &Op| &m.update_item_attributes,
                        |m: &mut Op| &mut m.update_item_attributes,
                    ),
                );
                fields.push(
                    ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<UpdateListAttributes>,
                    >(
                        "update_list_attributes",
                        |m: &Op| &m.update_list_attributes,
                        |m: &mut Op| &mut m.update_list_attributes,
                    ),
                );
                ::protobuf::reflect::MessageDescriptor::new::<Op>(
                    "Op",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Op {
        static mut instance: ::protobuf::lazy::Lazy<Op> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Op,
        };
        unsafe { instance.get(Op::new) }
    }
}

impl ::protobuf::Clear for Op {
    fn clear(&mut self) {
        self.kind = ::std::option::Option::None;
        self.add.clear();
        self.rem.clear();
        self.mov.clear();
        self.update_item_attributes.clear();
        self.update_list_attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Op {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Op {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum Op_Kind {
    KIND_UNKNOWN = 0,
    ADD = 2,
    REM = 3,
    MOV = 4,
    UPDATE_ITEM_ATTRIBUTES = 5,
    UPDATE_LIST_ATTRIBUTES = 6,
}

impl ::protobuf::ProtobufEnum for Op_Kind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Op_Kind> {
        match value {
            0 => ::std::option::Option::Some(Op_Kind::KIND_UNKNOWN),
            2 => ::std::option::Option::Some(Op_Kind::ADD),
            3 => ::std::option::Option::Some(Op_Kind::REM),
            4 => ::std::option::Option::Some(Op_Kind::MOV),
            5 => ::std::option::Option::Some(Op_Kind::UPDATE_ITEM_ATTRIBUTES),
            6 => ::std::option::Option::Some(Op_Kind::UPDATE_LIST_ATTRIBUTES),
            _ => ::std::option::Option::None,
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Op_Kind] = &[
            Op_Kind::KIND_UNKNOWN,
            Op_Kind::ADD,
            Op_Kind::REM,
            Op_Kind::MOV,
            Op_Kind::UPDATE_ITEM_ATTRIBUTES,
            Op_Kind::UPDATE_LIST_ATTRIBUTES,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Op_Kind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Op_Kind {}

impl ::std::default::Default for Op_Kind {
    fn default() -> Self {
        Op_Kind::KIND_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Op_Kind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct OpList {
    // message fields
    ops: ::protobuf::RepeatedField<Op>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OpList {
    fn default() -> &'a OpList {
        <OpList as ::protobuf::Message>::default_instance()
    }
}

impl OpList {
    pub fn new() -> OpList {
        ::std::default::Default::default()
    }

    // repeated .Op ops = 1;

    pub fn get_ops(&self) -> &[Op] {
        &self.ops
    }
    pub fn clear_ops(&mut self) {
        self.ops.clear();
    }

    // Param is passed by value, moved
    pub fn set_ops(&mut self, v: ::protobuf::RepeatedField<Op>) {
        self.ops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ops(&mut self) -> &mut ::protobuf::RepeatedField<Op> {
        &mut self.ops
    }

    // Take field
    pub fn take_ops(&mut self) -> ::protobuf::RepeatedField<Op> {
        ::std::mem::replace(&mut self.ops, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OpList {
    fn is_initialized(&self) -> bool {
        for v in &self.ops {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ops)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ops {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ops {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OpList {
        OpList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(
                    ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                        _,
                        ::protobuf::types::ProtobufTypeMessage<Op>,
                    >("ops", |m: &OpList| &m.ops, |m: &mut OpList| &mut m.ops),
                );
                ::protobuf::reflect::MessageDescriptor::new::<OpList>(
                    "OpList",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static OpList {
        static mut instance: ::protobuf::lazy::Lazy<OpList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OpList,
        };
        unsafe { instance.get(OpList::new) }
    }
}

impl ::protobuf::Clear for OpList {
    fn clear(&mut self) {
        self.ops.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OpList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12playlist4ops.proto\x12\0\"\x83\x01\n\x03Add\x12\x13\n\tfromIndex\
    \x18\x01\x20\x01(\x05B\0\x12\x16\n\x05items\x18\x02\x20\x03(\x0b2\x05.It\
    emB\0\x12&\n\rlist_checksum\x18\x03\x20\x01(\x0b2\r.ListChecksumB\0\x12\
    \x11\n\x07addLast\x18\x04\x20\x01(\x08B\0\x12\x12\n\x08addFirst\x18\x05\
    \x20\x01(\x08B\0:\0\"\xd5\x01\n\x03Rem\x12\x13\n\tfromIndex\x18\x01\x20\
    \x01(\x05B\0\x12\x10\n\x06length\x18\x02\x20\x01(\x05B\0\x12\x16\n\x05it\
    ems\x18\x03\x20\x03(\x0b2\x05.ItemB\0\x12&\n\rlist_checksum\x18\x04\x20\
    \x01(\x0b2\r.ListChecksumB\0\x12'\n\x0eitems_checksum\x18\x05\x20\x01(\
    \x0b2\r.ListChecksumB\0\x12&\n\ruris_checksum\x18\x06\x20\x01(\x0b2\r.Li\
    stChecksumB\0\x12\x14\n\nitemsAsKey\x18\x07\x20\x01(\x08B\0:\0\"\xba\x01\
    \n\x03Mov\x12\x13\n\tfromIndex\x18\x01\x20\x01(\x05B\0\x12\x10\n\x06leng\
    th\x18\x02\x20\x01(\x05B\0\x12\x11\n\x07toIndex\x18\x03\x20\x01(\x05B\0\
    \x12&\n\rlist_checksum\x18\x04\x20\x01(\x0b2\r.ListChecksumB\0\x12'\n\
    \x0eitems_checksum\x18\x05\x20\x01(\x0b2\r.ListChecksumB\0\x12&\n\ruris_\
    checksum\x18\x06\x20\x01(\x0b2\r.ListChecksumB\0:\0\"\x82\x03\n\x1aItemA\
    ttributesPartialState\x12!\n\x06values\x18\x01\x20\x01(\x0b2\x0f.ItemAtt\
    ributesB\0\x12A\n\x08no_value\x18\x02\x20\x03(\x0e2-.ItemAttributesParti\
    alState.ItemAttributeKindB\0\"\xfb\x01\n\x11ItemAttributeKind\x12\x10\n\
    \x0cITEM_UNKNOWN\x10\0\x12\x11\n\rITEM_ADDED_BY\x10\x01\x12\x12\n\x0eITE\
    M_TIMESTAMP\x10\x02\x12\x10\n\x0cITEM_MESSAGE\x10\x03\x12\r\n\tITEM_SEEN\
    \x10\x04\x12\x17\n\x13ITEM_DOWNLOAD_COUNT\x10\x05\x12\x18\n\x14ITEM_DOWN\
    LOAD_FORMAT\x10\x06\x12\x18\n\x14ITEM_SEVENDIGITAL_ID\x10\x07\x12\x1a\n\
    \x16ITEM_SEVENDIGITAL_LEFT\x10\x08\x12\x10\n\x0cITEM_SEEN_AT\x10\t\x12\
    \x0f\n\x0bITEM_PUBLIC\x10\n\x1a\0:\0\"\xd1\x02\n\x1aListAttributesPartia\
    lState\x12!\n\x06values\x18\x01\x20\x01(\x0b2\x0f.ListAttributesB\0\x12A\
    \n\x08no_value\x18\x02\x20\x03(\x0e2-.ListAttributesPartialState.ListAtt\
    ributeKindB\0\"\xca\x01\n\x11ListAttributeKind\x12\x10\n\x0cLIST_UNKNOWN\
    \x10\0\x12\r\n\tLIST_NAME\x10\x01\x12\x14\n\x10LIST_DESCRIPTION\x10\x02\
    \x12\x10\n\x0cLIST_PICTURE\x10\x03\x12\x16\n\x12LIST_COLLABORATIVE\x10\
    \x04\x12\x14\n\x10LIST_PL3_VERSION\x10\x05\x12\x19\n\x15LIST_DELETED_BY_\
    OWNER\x10\x06\x12!\n\x1dLIST_RESTRICTED_COLLABORATIVE\x10\x07\x1a\0:\0\"\
    \xf1\x01\n\x14UpdateItemAttributes\x12\x0f\n\x05index\x18\x01\x20\x01(\
    \x05B\0\x125\n\x0enew_attributes\x18\x02\x20\x01(\x0b2\x1b.ItemAttribute\
    sPartialStateB\0\x125\n\x0eold_attributes\x18\x03\x20\x01(\x0b2\x1b.Item\
    AttributesPartialStateB\0\x12&\n\rlist_checksum\x18\x04\x20\x01(\x0b2\r.\
    ListChecksumB\0\x120\n\x17old_attributes_checksum\x18\x05\x20\x01(\x0b2\
    \r.ListChecksumB\0:\0\"\xe0\x01\n\x14UpdateListAttributes\x125\n\x0enew_\
    attributes\x18\x01\x20\x01(\x0b2\x1b.ListAttributesPartialStateB\0\x125\
    \n\x0eold_attributes\x18\x02\x20\x01(\x0b2\x1b.ListAttributesPartialStat\
    eB\0\x12&\n\rlist_checksum\x18\x03\x20\x01(\x0b2\r.ListChecksumB\0\x120\
    \n\x17old_attributes_checksum\x18\x04\x20\x01(\x0b2\r.ListChecksumB\0:\0\
    \"\xc0\x02\n\x02Op\x12\x18\n\x04kind\x18\x01\x20\x01(\x0e2\x08.Op.KindB\
    \0\x12\x13\n\x03add\x18\x02\x20\x01(\x0b2\x04.AddB\0\x12\x13\n\x03rem\
    \x18\x03\x20\x01(\x0b2\x04.RemB\0\x12\x13\n\x03mov\x18\x04\x20\x01(\x0b2\
    \x04.MovB\0\x127\n\x16update_item_attributes\x18\x05\x20\x01(\x0b2\x15.U\
    pdateItemAttributesB\0\x127\n\x16update_list_attributes\x18\x06\x20\x01(\
    \x0b2\x15.UpdateListAttributesB\0\"m\n\x04Kind\x12\x10\n\x0cKIND_UNKNOWN\
    \x10\0\x12\x07\n\x03ADD\x10\x02\x12\x07\n\x03REM\x10\x03\x12\x07\n\x03MO\
    V\x10\x04\x12\x1a\n\x16UPDATE_ITEM_ATTRIBUTES\x10\x05\x12\x1a\n\x16UPDAT\
    E_LIST_ATTRIBUTES\x10\x06\x1a\0:\0\"\x1e\n\x06OpList\x12\x12\n\x03ops\
    \x18\x01\x20\x03(\x0b2\x03.OpB\0:\0B\0b\x06proto2\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
